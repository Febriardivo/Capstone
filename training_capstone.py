# -*- coding: utf-8 -*-
"""Training_Capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GfOCytwX0z0S7E-7q1r1_fuuAJid0BF
"""

!pip install ultralytics

"""## Train Model"""

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n.yaml")  # build a new mode1l from YAML
model = YOLO("yolo11n.pt")  # load a pretrained model (recommended for training)
model = YOLO("yolo11n.yaml").load("yolo11n.pt")  # build from YAML and transfer weights

# Train the model
results = model.train(data="https://app.roboflow.com/ds/lsVMQRExB2?key=PKolKMvjyQ", epochs=50, imgsz=640, batch=16, lr0=0.001)

"""## Validated"""

from ultralytics import YOLO

# Load a model
model = YOLO("yolo11n.pt")  # load an official model

# Load your custom model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Validate the model
metrics = model.val(data="/content/datasets/lsVMQRExB2/data.yaml")
print("mAP50-95:", metrics.box.map)
print("mAP50:", metrics.box.map50)
print("mAP75:", metrics.box.map75)
print("Per-category mAPs:", metrics.box.maps)

"""## Predict"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="ARWLW8qT1lHfEIG29duo")
project = rf.workspace("alpha2").project("road-damage-detection-capstone")
version = project.version(5)
dataset = version.download("yolov11")

from ultralytics import YOLO
import matplotlib.pyplot as plt
import cv2

# Load best model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Daftar path ke gambar
image_paths = [
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/1666226029863_jpg.rf.c9acb500e77426f91b019662b27216a2.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/1666226029757_jpg.rf.b331a4cce98c213e6185ef987be963e0.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/1666226029975_jpg.rf.3803fdcd6ab7c41eaecddc66ce82195c.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/199a3cfc-4f94-4e6f-af9d-d57866225bc9_jpg.rf.f9089acfb47480f911657df332ae2ab5.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/20250327_083252_jpg.rf.0588b6d8c468841e0a47c61535c92a60.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/aspal-jalan-bandung-kota-malang-ambles_169_jpeg.rf.e693e8f6b3d52dca37c831345ddff24f.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/IMG_2428-1-_JPG.rf.b5b08dcfd9deac9b9d8582584107d365.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/WhatsApp-Image-2023-04-16-at-11-38-06_jpeg.rf.6c56c634be7f615f0d81593f5ce75e76.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/lubang_bjn-20-_jpg.rf.7cbdb7d4bf8dbcdb5f1cda17ae3c08d7.jpg",
    "/content/Road-Damage-Detection-(Capstone)-5/test/images/WhatsApp-Image-2023-03-12-at-05-47-33-1-_jpeg.rf.26d4522874f5016c00221bb398269096.jpg"
]

# Prediksi banyak gambar sekaligus
results = model(image_paths, save=True)

# Tampilkan hasil setiap gambar
for i, result in enumerate(results):
    im_array = result.plot()
    im_rgb = cv2.cvtColor(im_array, cv2.COLOR_BGR2RGB)

    plt.figure(figsize=(10, 10))
    plt.imshow(im_rgb)
    plt.axis("off")
    plt.title(f"Prediction Result {i+1}")
    plt.show()

from ultralytics import YOLO
import matplotlib.pyplot as plt
import cv2

# Load best model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Daftar path ke gambar
image_paths = [
    "/content/datasets/lsVMQRExB2/test/images/0-106-_jpg.rf.9ee7abc90b36f246f4943648242ee04f.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-109-_jpg.rf.763c5a4e2586629d6898244f3630c69e.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-110-_jpg.rf.78b8373df82acae485d1290661eeb280.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-114-_jpg.rf.58919cb5489c4cb888ff39795b5e50af.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-114-_jpg.rf.67b279658dda856961c1421bf3a63b66.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-116-_jpg.rf.b98b64a6edf5aa35ba6a868897df2813.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-117-_jpg.rf.691d8e99ffc768ffb86d962d17d58a5a.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-122-_jpg.rf.16bd5140a8a9a47737ecfd1024fe2bd6.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-131-_jpg.rf.1a44ee72368b678a062e87771aac5fcd.jpg",
    "/content/datasets/lsVMQRExB2/test/images/0-131-_jpg.rf.4c6ec1f905df741663cca9d1581a2ad4.jpg"
]

# Prediksi banyak gambar sekaligus
results = model(image_paths, save=True)

# Tampilkan hasil setiap gambar
for i, result in enumerate(results):
    im_array = result.plot()
    im_rgb = cv2.cvtColor(im_array, cv2.COLOR_BGR2RGB)

    plt.figure(figsize=(10, 10))
    plt.imshow(im_rgb)
    plt.axis("off")
    plt.title(f"Prediction Result {i+1}")
    plt.show()

"""## Export"""

from ultralytics import YOLO

# Load best model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Export the model to ONNX format
model.export(format="onnx", dynamic=True, simplify=True)